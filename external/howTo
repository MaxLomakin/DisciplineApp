Spring MVC + AngularJS + Bootstrap + HTML5 + Hibernate + Maven + Git + MySql

http://azmind.com/free-bootstrap-themes-templates/

font-awesome - for twitter, facebook sotial icons

https://springframework.guru/spring-boot-web-application-part-3-spring-data-jpa/

redux
thymleaf - spring boot

hibernate session is not thread safe

transient - not allowed lazy init in hibernate

http://blog.jhades.org/how-does-spring-transactional-really-work/

http://www.apache-maven.ru/profiles.html

To use profile: Maven projects tab -> choose profile -> plugins -> tomcat7:redeploy

flyway migration
https://blog.codecentric.de/en/2017/01/flyway-tutorial-execute-migrations-using-maven/
plugins -> flyway -> flyway:migrate

maven executions, phase, goal. maven lifecycle
https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

flyway scripts has checksum. if script is changed you need to use flyway: clean

http://www.mkyong.com/tutorials/spring-boot-tutorials/

https://github.com/winterbe/spring-react-example

https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
https://spring.io/guides/tutorials/react-and-spring-data-rest/
http://www.davidtanzer.net/getting_started_with_react_and_spring_boot

========================================================================================================================
================================================ SPRING BOOT START =====================================================
========================================================================================================================
Spring boot.
    Advantages: doesn't need tomcat or another servlet container
                has integration with many frameworks
    Disadvantages: pulls for itself many unused dependencies
Spring boot has another way to work with maven properties and has own profiling.
Spring boot uses org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration for flyway and similar frameworks.
This is a java spring configuration. For getting bean you can inject it. Also you can overwrite it.
Spring boot uses UsernamePasswordAuthenticationFilter for authorization.

========================================================================================================================
================================================ SPRING BOOT END =======================================================
========================================================================================================================

========================================================================================================================
============================================== SPRING SECURITY START ===================================================
========================================================================================================================
Main part is SecurityConfig that has security configuration.
http.authorizeRequests() - allows to add antMatchers for needed urls. (That why static files could be not found).
anyRequest() - Any URL that has not already been matched on only requires that the user be authenticated
https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#authorize-requests

For adding csrf token to ajax you need to:
1. Add tags to html
    <meta name="_csrf_header" th:content="${_csrf.headerName}"/>
    <meta name="_csrf" th:content="${_csrf.token}"/>
2. Use its content $("meta[name='_csrf']").attr("content")
18.4.3 Include the CSRF Token: http://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-using/

Get current logged in User: User user = (User)SecurityContextHolder.getContext().getAuthentication().getPrincipal();

Spring security uses default post method for login that override mvc POST /login

@PreAuthorize
https://docs.spring.io/spring-security/site/docs/current/reference/html/el-access.html
For using PreAuthorize add @EnableGlobalMethodSecurity(prePostEnabled = true) to securutyConfig
========================================================================================================================
============================================== SPRING SECURITY END =====================================================
========================================================================================================================

========================================================================================================================
================================================ SPRING DATA START =====================================================
========================================================================================================================
To customize standard spring data rest api:
add controller: @RepositoryRestController
16.2.1. Handling rels: http://docs.spring.io/spring-data/rest/docs/current/reference/html/#customizing-sdr

For getting related POJOs as objects add annotation @RepositoryRestResource(exported = false) to reposirory
or use GET method

@HandleBeforeCreate, @HandleBeforeSave - you can use multiple annotations on one method
Spring data supports query creation from method names. For example:
public interface HabitRepository extends PagingAndSortingRepository<Habit, Long> {
    List<Habit> findByHabitUserId(Long userId); ... }

org.springframework.data.rest.core.support.DefaultSelfLinkProvider - creates HATEOAS self link
RepositoryEntityLookupConfig - for custom self link

// This will add a DDL default
@ColumnDefault("'This is my default name'")
// This will add a runtime default.
@GeneratorType(type = MyValueGenerator.class)
private String name;
========================================================================================================================
================================================ SPRING DATA END =======================================================
========================================================================================================================

========================================================================================================================
==================================================== REACT START =======================================================
========================================================================================================================
https://facebook.github.io/react/
https://www.tutorialspoint.com/reactjs/reactjs_components.htm
Using React in a multi-page app
https://stackoverflow.com/questions/31933359/using-react-in-a-multi-page-app
React has local visiblity. It means that if you add div id without local script it won't find that dom element
<div id="user"></div>
<script src="built/bundle.js"></script>
========================================================================================================================
==================================================== REACT END =========================================================
========================================================================================================================


Thymleaf
th:field  for POJO fields.
http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#validation-and-error-messages
8 Validation and Error Messages
http://blog.codeleak.pl/2016/12/thymeleaf-reload-templates-and-static-resources.html - fast reload static files
thymleaf binded fields validation: <p th:if="${#fields.hasErrors('passwordConfirm')}" th:errors="*{passwordConfirm}"></p>
onclick="document.forms['logoutForm'] - html uses its forms

Lombok
Use idea plugin for lombok: https://plugins.jetbrains.com/plugin/6317-lombok-plugin

React + spring boot: https://spring.io/guides/tutorials/react-and-spring-data-rest/
https://habrahabr.ru/post/321552/

For init package.json file (config file)
download nodejs: https://nodejs.org/en/download/
run npm init in project folder

Q: How configure? What is npm and webpack? How was added clien.js and api folder? Why doesn't work frontend-maven-plugin in
   idea (it works only with mvn install command)?
ANS: Configured by NPM "package.json" - configuration for libraries and what framework is used.
     Entry point is "webpack.config.js" - configuration for input, output folders, loaders etc.
     Js can be imported by "require". const root = '/api' - root folder for special files.
     frontend-maven-plugin works fine, for example: if you use webpack run it (plugin)

Quick rebuild for frontend:
1. run maven plugin: frontend:webpack
2. Quick rebuild for static files (spring boot dev plugin)

What the reason to add local bootstrap.js if it can be downloaded through href?

HIBERNATE
@Temporal(TemporalType.TIMESTAMP)
@UpdateTimestamp

For validation use JSP 303 annotations: @NotNull and repository by default throws 500 internal server error

Maven plugins
Maven resources plugin There is can't be more than one configuration in execution

org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter doesn't respect urls 'user/edit' it can't
download css and js resources (maybe its because of different resource level)